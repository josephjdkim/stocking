{"version":3,"sources":["contexts/StockDataContext.js","components/SearchBar.js","components/StockingHeader.js","components/StockInfo.js","components/StockCard.js","components/Watchlist.js","App.js","serviceWorker.js","index.js"],"names":["StockDataContext","createContext","StockDataContextProvider","props","useState","name","symbol","updated","open","high","low","close","volume","change","stockData","setStockData","Provider","value","children","SearchBar","useContext","id","placeholder","onKeyDown","e","key","preventDefault","companyName","stockQuery","fetch","then","companyResponse","json","companyJSON","bestMatches","response","jsonResponse","console","log","ts","data","Object","keys","Number","toFixed","toUpperCase","catch","err","handleSearch","document","getElementById","StockingHeader","className","StockInfo","useEffect","style","display","toLocaleString","map","pair","includes","StockCard","theme","onClick","stock","Watchlist","watchlist","setWatchlist","find","s","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.81ca7432.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const StockDataContext = createContext();\n\nfunction StockDataContextProvider(props) {\n  const [stockData, setStockData] = useState({\n    name: 'Stocking',\n    symbol: 'STOCKING',\n    updated: 0,\n    open: 0,\n    high: 0,\n    low: 0,\n    close: 0,\n    volume: 0,\n    change: 0\n  });\n  return (\n    <StockDataContext.Provider value={{stockData, setStockData}}>\n      {props.children}\n    </StockDataContext.Provider>\n  );\n}\n\nexport default StockDataContextProvider;","import React, { Component, useContext } from 'react';\nimport config from '../config.js';\nimport { StockDataContext } from '../contexts/StockDataContext'\n\nfunction SearchBar() {\n  const { stockData, setStockData } = useContext(StockDataContext);\n  const COMPANY_API = 'https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=';\n  const STOCK_API = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=';\n\n  function handleSearch(symbol) {\n    // let stockQuery = STOCK_API + symbol + '&apikey=' + config.apiKey;\n    // let companyQuery = COMPANY_API + symbol + '&apikey=' + config.apiKey;\n\n    // temporary public-facing api key for GitHub Pages demo\n    let stockQuery = STOCK_API + symbol + '&apikey=99B0OWHKU6GXNX6A';\n    let companyQuery = COMPANY_API + symbol + '&apikey=99B0OWHKU6GXNX6A';\n\n    let companyName;\n\n    fetch(companyQuery)\n      .then((companyResponse) => { return companyResponse.json(); })\n      .then((companyJSON) => {\n        companyName = companyJSON.bestMatches[0][\"2. name\"];\n        return fetch(stockQuery);\n      })\n      .then((response) => { return response.json(); })\n      .then((jsonResponse) => {\n        console.log(jsonResponse)\n        let ts = jsonResponse[\"Time Series (Daily)\"];\n        let data = ts[Object.keys(ts)[0]];\n        let updated = jsonResponse[\"Meta Data\"][\"3. Last Refreshed\"];\n\n        let open = Number(Number(data['1. open']).toFixed(2));\n        let close = Number(Number(data['4. close']).toFixed(2));\n        let high = Number(Number(data['2. high']).toFixed(2));\n        let low = Number(Number(data['3. low']).toFixed(2));\n        let volume = Number(data['5. volume']);\n\n        setStockData({\n          name: companyName,\n          symbol: symbol.toUpperCase(),\n          updated: updated,\n          open:  open,\n          high: high,\n          low:  low,\n          close: close,\n          change: Number(Number(((Number(close) - Number(open)) / Number(open)) * 100).toFixed(2)),\n          volume: volume\n        });\n        // console.log(Number(open.replace(',','')))\n      })\n      .catch(err => {\n        console.log('Encountered an error:', err)\n      });\n    };\n  \n  function handleKeyDown(e) {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      let symbol = document.getElementById('searchbar').value;\n      handleSearch(symbol);\n      document.getElementById('searchbar').value = '';\n    };\n  };\n\n  return (\n    <div id=\"search\">\n      <input id=\"searchbar\" placeholder=\"search a ticker\" onKeyDown={handleKeyDown} />\n    </div>\n  );\n}\n\nexport default SearchBar;","import React, { Component } from 'react';\nimport SearchBar from './SearchBar.js'\n\nfunction StockingHeader() {\n  return (\n    <header className=\"header\">\n      <h1 className=\"hero\">Stocking „ÄΩÔ∏èüëÄ</h1>\n      <SearchBar />\n    </header>\n  );\n}\n\nexport default StockingHeader;","import React, { Component, useContext, useEffect } from 'react';\nimport { StockDataContext } from '../contexts/StockDataContext'\n\nfunction StockInfo() {\n  const {stockData} = useContext(StockDataContext);\n  const datumKeys = [['volume', 'Volume'], ['open', 'Open'], ['high', 'High'], ['low', 'Low'], ['updated', 'Updated']];\n\n  useEffect(() => {\n    handleDefault();\n    setTheme();\n    \n  }, [stockData]);\n\n  function handleDefault() {\n    if (stockData['symbol'] === 'STOCKING') {\n      document.getElementById('stockInfo').style.display = 'none';\n    } else {\n      document.getElementById('stockInfo').style.display = 'block'\n    };\n  }\n\n  function setTheme() {\n    if (stockData['change'] >= 0) {\n      document.getElementById('stockInfo').className = 'green-stockInfo';\n      document.getElementById('stockInfoTop').className = 'green-stockInfoTop';\n    } else {\n      document.getElementById('stockInfo').className = 'red-stockInfo';\n      document.getElementById('stockInfoTop').className = 'red-stockInfoTop';\n    }\n  }\n\n  return (\n    <div id=\"stockInfo\">\n      <div id=\"stockInfoTop\">\n        <div id=\"stockInfoName\" className=\"stockInfoTop-left\">{stockData.name}</div>\n        <div className=\"stockInfoTop-left\">{stockData.symbol}</div>\n        <div className=\"stockInfoTop-right\">${stockData.close.toLocaleString()}</div>\n        <div className=\"stockInfoTop-right\">{stockData.change}%</div>\n      </div>\n      <div id=\"stockDataBank\">\n      {datumKeys.map(pair => {\n        return (\n          <div className=\"stockDatum\">\n            <p className=\"datumLabel\">{pair[1]}:</p>\n            <p className=\"datumValue\">{\n              (['Open', 'High', 'Low'].includes(pair[1])\n                ? '$'+stockData[pair[0]].toLocaleString()\n                : stockData[pair[0]].toLocaleString())\n            }</p>\n          </div>\n        )\n      })}\n      </div>\n    </div>\n  );\n}\n\nexport default StockInfo;","import React, { Component, useContext } from 'react';\nimport { StockDataContext } from '../contexts/StockDataContext'\n\nfunction StockCard(props) {\n  const { setStockData } = useContext(StockDataContext);\n  const className = \"stockCard \" + props.theme + \"-stockCard\";\n  // let displayName = props.stock.name;\n\n  // if (displayName.length >= 20) { displayName = displayName.slice(0, 18) + '...'; }\n  \n  function updateStockData() {\n    setStockData({\n      name: props.stock.name,\n      symbol: props.stock.symbol,\n      updated: props.stock.updated,\n      open:  props.stock.open,\n      high: props.stock.high,\n      low:  props.stock.low,\n      close: props.stock.close,\n      change: props.stock.change,\n      volume: props.stock.volume\n    });\n  };\n\n  return (\n    <div className={className} onClick={updateStockData}>\n      <p className=\"stockCard-name\">{props.stock.name}</p>\n      <h3 className=\"stockCard-symbol\">{props.stock.symbol}</h3>\n      <h3 className=\"stockCard-change\">{props.stock.change}%</h3>\n    </div>\n  );\n}\n\nexport default StockCard;","import React, { Component, useState, useContext, useEffect } from 'react';\nimport StockCard from './StockCard.js'\nimport { StockDataContext } from '../contexts/StockDataContext'\n\nfunction Watchlist() {\n  const { stockData } = useContext(StockDataContext);\n  const [watchlist, setWatchlist] = useState([]);\n\n  useEffect(() => {\n    checkNewStock();\n  }, [stockData]);\n  \n  function checkNewStock() {\n    const isDuplicate = watchlist.find(s => (s.symbol === stockData.symbol))\n    if ((!isDuplicate && !(stockData.symbol === 'STOCKING'))) {\n      setWatchlist([{\n        name: stockData.name,\n        symbol: stockData.symbol,\n        updated: stockData.updated,\n        open: stockData.open,\n        high: stockData.high,\n        low: stockData.low,\n        close: stockData.close,\n        volume: stockData.volume,\n        change: stockData.change\n      }, ...watchlist]);\n    };\n  };\n  \n  function setStockTheme(s) {\n    return (s.change >= 0) ? 'green' : 'red';\n  }\n\n  return (\n    <div className=\"watchlist\">\n      <h2 className=\"prompt\">Recently Searched Stocks:</h2>\n      <div className=\"stocks\">\n        {watchlist.map(stock => {\n          let theme = setStockTheme(stock);\n          return(\n            <StockCard stock={stock} theme={theme}/>\n            )\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default Watchlist;","import React from 'react';\nimport StockingHeader from './components/StockingHeader.js'\nimport StockInfo from './components/StockInfo.js'\nimport Watchlist from './components/Watchlist.js'\nimport './App.css';\nimport StockDataContextProvider from './contexts/StockDataContext.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StockDataContextProvider>\n        <StockingHeader />\n        <StockInfo />\n        <Watchlist />\n      </StockDataContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}